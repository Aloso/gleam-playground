@top Program { expression* }

@skip { space | LineComment }

expression {
  kw<"import"> ModuleName |  
  Declaration |
  Number |
  String |
  boolean |
  IfExpression |
  CaseExpression |
  LetExpression
}

Declaration {
  // function decl
  kw<"pub">? kw<"external">? kw<"fn"> "(" params* ")" arrow TypeIdentifier "{" expression* "}"

  // type decl
  kw<"pub">? (kw<"external"> | kw<"opaque">)? kw<"type"> TypeIdentifier
}

params {
  (kw<"to"> Variable | Variable) ":" TypeIdentifier ","?
}

IfExpression {
  kw<"if"> Identifier "{" expression* "}"
}

CaseExpression {
  kw<"case"> Identifier "{" expression* "}"
}

LetExpression {
  kw<"let"> Identifier "=" expression
}

Variable { identifier }

kw<term> { @specialize[@name={term}]<identifier, term> }

boolean { @specialize[@name=Boolean]<identifier, "True" | "False"> }

@tokens {
  identifier {
    $[a-zA-Z_] $[a-zA-Z0-9_]*
  }  

  arrow { "->" }

  Import { "import" }
  Public { "pub" }
  Fn { "fn" }
  As { "as" }
  If { "if" }
  Assert { "assert" }
  Case { "case" }
  Const { "const" }
  External { "external" }
  Let { "let" }
  Opaque { "opaque" }
  Todo { "todo" }
  Try { "try" }
  Type { "type" }

  ModuleName { $[a-zA-Z]+ }

  FunctionName { $[a-zA-Z_\-0-9]+ }

  TypeIdentifier { $[A-Z]$[a-zA-Z_\-0-9]+ }

  Identifier { $[a-zA-Z_\-0-9]+ }

  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { "\/\/" ![\n]* }

  Number {
    (std.digit ("_" | std.digit)* ("." ("_" | std.digit)*)? | "." std.digit ("_" | std.digit)*)
      (("e" | "E") ("+" | "-")? ("_" | std.digit)+)? |
    std.digit ("_" | std.digit)* "n" |
    "0x" (std.digit | $[a-fA-F] | "_")+ |
    "0b" $[01_]+ |
    "0o" $[0-7_]+
  }

  space { $[ \t\n\r]+ }

  "(" ")"
}

@detectDelim